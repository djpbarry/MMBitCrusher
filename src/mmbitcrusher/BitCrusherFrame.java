/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mmbitcrusher;

import javax.swing.DefaultComboBoxModel;
import static mmbitcrusher.VariableMap.BINNING_OPTIONS;
import static mmbitcrusher.VariableMap.BINNING_STRING;
import static mmbitcrusher.VariableMap.BIT_DEPTH_OPTIONS;
import static mmbitcrusher.VariableMap.BIT_DEPTH_STRING;
import mmbitcrusher.VariableMap.Binning;
import static mmbitcrusher.VariableMap.Binning.ONE;
import mmbitcrusher.VariableMap.BitDepth;
import static mmbitcrusher.VariableMap.BitDepth.SIXTEEN_BIT;
import static mmbitcrusher.VariableMap.SCALING_STRING;
import mmcorej.CMMCore;
import org.micromanager.PropertyMap;
import org.micromanager.Studio;
import org.micromanager.data.ProcessorConfigurator;
import org.micromanager.internal.utils.MMFrame;

/**
 *
 * @author David Barry <david.barry at crick dot ac dot uk>
 */
public class BitCrusherFrame extends MMFrame implements ProcessorConfigurator {

    private static final int DEFAULT_WIN_X = 100;
    private static final int DEFAULT_WIN_Y = 100;
    private Studio studio;
    private final CMMCore core;
    private PropertyMap settings;
    private BitDepth bitDepth;
    private Binning binning;
    private boolean scaling;
    private static final String BIT_DEPTH_LABEL = String.format("Specify %s:", BIT_DEPTH_STRING);
    private static final String BINNING_LABEL = String.format("Specify %s level:", BINNING_STRING);
    private static final String SCALING_LABEL = String.format("Perform %s?", SCALING_STRING);
//    private static final int EIGHT_BIT = 0, SIXTEEN_BIT = 1, BIN_1X1 = 2, BIN_2X2 = 4, BIN_4X4 = 8, BIN_8X8 = 16;

    /**
     * Creates new form BitCrusherFrame
     */
    public BitCrusherFrame() {
        this(null, null);
    }

    public BitCrusherFrame(PropertyMap settings, Studio studio) {
        this.settings = settings;
        this.studio = studio;
        this.core = studio.getCMMCore();
        int binVal = settings.getInt(BINNING_STRING, studio.profile().getInt(getClass(), ONE.getBinText(), ONE.getBinValue()));
        int bitVal = settings.getInt(BIT_DEPTH_STRING, studio.profile().getInt(getClass(), SIXTEEN_BIT.getBitDepthText(), SIXTEEN_BIT.getBitDepthValue()));
        this.bitDepth = VariableMap.getBitDepth(bitVal);
        this.binning = VariableMap.getBinning(binVal);
        this.scaling = settings.getBoolean(SCALING_STRING, studio.profile().getBoolean(getClass(), SCALING_STRING, scaling));
        initComponents();
        loadAndRestorePosition(DEFAULT_WIN_X, DEFAULT_WIN_Y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        bitDepthLabel = new javax.swing.JLabel();
        binningLabel = new javax.swing.JLabel();
        bitDepthComboBox = new javax.swing.JComboBox<String>();
        binningComboBox = new javax.swing.JComboBox<String>();
        scalingCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        bitDepthLabel.setText(BIT_DEPTH_LABEL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel1.add(bitDepthLabel, gridBagConstraints);

        binningLabel.setText(BINNING_LABEL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel1.add(binningLabel, gridBagConstraints);

        bitDepthComboBox.setModel(new DefaultComboBoxModel<String>(BIT_DEPTH_OPTIONS));
        bitDepthComboBox.setSelectedItem(bitDepth.getBitDepthText());
        bitDepthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bitDepthComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel1.add(bitDepthComboBox, gridBagConstraints);

        binningComboBox.setModel(new DefaultComboBoxModel<String>(BINNING_OPTIONS));
        binningComboBox.setSelectedItem(binning.getBinText());
        binningComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binningComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel1.add(binningComboBox, gridBagConstraints);

        scalingCheckBox.setText(SCALING_LABEL);
        scalingCheckBox.setSelected(scaling);
        scalingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scalingCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        jPanel1.add(scalingCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void binningComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binningComboBoxActionPerformed
        bitDepthComboBoxActionPerformed(evt);
    }//GEN-LAST:event_binningComboBoxActionPerformed

    private void bitDepthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bitDepthComboBoxActionPerformed
        String binString = (String) binningComboBox.getSelectedItem();
        String bitString = (String) bitDepthComboBox.getSelectedItem();
        this.bitDepth = VariableMap.getBitDepth(bitString);
        this.binning = VariableMap.getBinning(binString);
        updateSettings(bitDepth.getBitDepthValue(), binning.getBinValue());
    }//GEN-LAST:event_bitDepthComboBoxActionPerformed

    private void scalingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scalingCheckBoxActionPerformed
        this.scaling = scalingCheckBox.isSelected();
    }//GEN-LAST:event_scalingCheckBoxActionPerformed

    public PropertyMap getSettings() {
        PropertyMap.PropertyMapBuilder builder = studio.data().getPropertyMapBuilder();
        builder.putInt(BINNING_STRING, binning.getBinValue());
        builder.putInt(BIT_DEPTH_STRING, bitDepth.getBitDepthValue());
        builder.putBoolean(SCALING_STRING, scaling);
        return builder.build();
    }

    public void cleanup() {
        this.dispose();
    }

    public void showGUI() {
        setVisible(true);
    }

    private void updateSettings(int bitDepth, int binning) {
        this.bitDepth = VariableMap.getBitDepth(bitDepth);
        this.binning = VariableMap.getBinning(binning);
        studio.profile().setInt(getClass(), BINNING_STRING, binning);
        studio.profile().setInt(getClass(), BIT_DEPTH_STRING, bitDepth);
        studio.profile().setBoolean(getClass(), SCALING_STRING, scaling);
        studio.data().notifyPipelineChanged();
        repaint();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> binningComboBox;
    private javax.swing.JLabel binningLabel;
    private javax.swing.JComboBox<String> bitDepthComboBox;
    private javax.swing.JLabel bitDepthLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox scalingCheckBox;
    // End of variables declaration//GEN-END:variables
}
